import { GLX } from './glx';
export declare type RenderPipeline = {
    PushMatrix: () => void;
    TexCoord2f: (x: number, y: number) => void;
    Vertex3f: (x: number, y: number, z: number) => void;
    BlendFunc: (sfactor: number, dfactor: number) => void;
    Hint: (target: number, mode: number) => void;
    ProgramString: (target: number, format: number, src: number) => void;
    Render: (ctxLocal?: number) => void;
    Color3f: (r: number, g: number, b: number) => void;
    Clear: (mask: number) => void;
    Ortho: (left: number, right: number, bottom: number, top: number, znear: number, zfar: number) => void;
    Normal3fv: (v: [number, number, number]) => void;
    Translatef: (x: number, y: number, z: number) => void;
    BindTexture: (target: number, texture: number) => void;
    Begin: (what: number) => void;
    Enable: (value: number) => void;
    LoadIdentity: () => void;
    BindProgram: (target: number, program: number) => void;
    TexEnvf: (target: number, pname: number, param: number) => void;
    Frustum: (left: number, right: number, bottom: number, top: number, znear: number, zfar: number) => void;
    ClearColor: (r: number, g: number, b: number, a: number) => void;
    PopMatrix: () => void;
    PointSize: (r: number) => void;
    Color4f: (r: number, g: number, b: number, a: number) => void;
    MatrixMode: (mode: number) => void;
    Lightfv: (light: number, name: number, p1: (number | [number, number, number, number]), p2?: number, p3?: number, p4?: number) => void;
    Viewport: (x: number, y: number, w: number, h: number) => void;
    Vertex3fv: (v: [number, number, number]) => void;
    CallList: (list: number) => void;
    Rotatef: (a: number, x: number, y: number, z: number) => void;
    TexImage2D: (target: number, level: number, internalFormat: number, width: number, height: number, border: number, format: number, type: number, data: Buffer) => void;
    ShadeModel: (model: number) => void;
    TexParameterf: (target: number, pname: number, param: number) => void;
    TexParameterfv: (target: number, pname: number, param: number[]) => void;
    TexParameteri: (target: number, pname: number, param: number) => void;
    Materialfv: (light: number, name: number, p1: (number | [number, number, number, number]), p2?: number, p3?: number, p4?: number) => void;
    End: () => void;
    Normal3f: (x: number, y: number, z: number) => void;
    Scalef: (x: number, y: number, z: number) => void;
};
export declare const glxrender: (glx: GLX, ctx: number) => RenderPipeline;
