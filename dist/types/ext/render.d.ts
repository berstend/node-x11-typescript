import { XCallback, XExtension, XExtensionInit } from '../xcore';
export declare type Glyph = {
    id: number;
    width: number;
    height: number;
    x: number;
    y: number;
    offX: number;
    offY: number;
    image: Buffer;
    srcX: number;
    srcY: number;
};
export interface Render extends XExtension {
    QueryVersion: (clientMaj: number, clientMin: number, callback: XCallback<[number, number]>) => void;
    QueryPictFormat: (callback: XCallback<{
        formats: number[][];
    }>) => void;
    QueryFilters: (callback: XCallback<[number, string]>) => void;
    CreatePicture: (pid: number, drawable: number, pictformat: number, values: {
        repeat: number;
        alphaMap: number;
        alphaXOrigin: number;
        alphaYOrigin: number;
        clipXOrigin: number;
        clipYOrigin: number;
        clipMask: number;
        graphicsExposures: number;
        subwindowMode: number;
        polyEdge: number;
        polyMode: number;
        dither: number;
        componentAlpha: number;
    }) => void;
    FreePicture: (pid: number) => void;
    SetPictureTransform: (pid: number, matrix: [number, number, number, number, number, number, number, number, number]) => void;
    SetPictureFilter: (pid: number, name: 'nearest' | 'bilinear' | 'fast' | 'good' | 'convolution' | 'binomial' | 'gaussian', filterParams: number[] | number) => void;
    CreateSolidFill: (pid: number, r: number, g: number, b: number, a: number) => void;
    RadialGradient: (pid: number, p1: [number, number], p2: [number, number], r1: number, r2: number, stops: [number, [number, number, number, number]][]) => void;
    LinearGradient: (pid: number, p1: [number, number], p2: [number, number], stops: [number, [number, number, number, number]][]) => void;
    ConicalGradient: (pid: number, center: [number, number], angle: number, stops: [number, [number, number, number, number]][]) => void;
    FillRectangles: (op: number, pid: number, color: [number, number, number, number], rects: [number, number, number, number]) => void;
    Composite: (op: number, src: number, mask: number, dst: number, srcX: number, srcY: number, maskX: number, maskY: number, dstX: number, dstY: number, width: number, height: number) => void;
    Trapezoids: (op: number, src: number, srcX: number, srcY: number, dst: number, maskFormat: number, trapz: [number, number, number, number, number, number, number, number, number, number]) => void;
    AddTraps: (pic: number, offX: number, offY: number, trapList: number[]) => void;
    Triangles: (op: number, src: number, srcX: number, srcY: number, dst: number, maskFormat: number, tris: number[]) => void;
    CreateGlyphSet: (gsid: number, format: number) => void;
    ReferenceGlyphSet: (gsid: number, existing: number) => void;
    FreeGlyphSet: (gsid: number) => void;
    AddGlyphs: (gsid: number, glyphs: Glyph[]) => void;
    AddGlyphsFromPicture: (gsid: number, src: number, glyphs: Glyph[]) => void;
    CompositeGlyphs: (glyphBits: 8 | 16 | 32, op: number, src: number, dst: number, maskFormat: number, gsid: number, srcX: number, srcY: number, glyphs: ([number, number, string] | string | number)[]) => void;
    CompositeGlyphs8: (op: number, src: number, dst: number, maskFormat: number, gsid: number, srcX: number, srcY: number, glyphs: ([number, number, string] | string | number)[]) => void;
    CompositeGlyphs16: (op: number, src: number, dst: number, maskFormat: number, gsid: number, srcX: number, srcY: number, glyphs: ([number, number, string] | string | number)[]) => void;
    CompositeGlyphs32: (op: number, src: number, dst: number, maskFormat: number, gsid: number, srcX: number, srcY: number, glyphs: ([number, number, string] | string | number)[]) => void;
    mono1: number;
    rgb24: number;
    rgba32: number;
    a8: number;
    PictOp: {
        Minimum: 0;
        Clear: 0;
        Src: 1;
        Dst: 2;
        Over: 3;
        OverReverse: 4;
        In: 5;
        InReverse: 6;
        Out: 7;
        OutReverse: 8;
        Atop: 9;
        AtopReverse: 10;
        Xor: 11;
        Add: 12;
        Saturate: 13;
        Maximum: 13;
        DisjointMinimum: 0x10;
        DisjointClear: 0x10;
        DisjointSrc: 0x11;
        DisjointDst: 0x12;
        DisjointOver: 0x13;
        DisjointOverReverse: 0x14;
        DisjointIn: 0x15;
        DisjointInReverse: 0x16;
        DisjointOut: 0x17;
        DisjointOutReverse: 0x18;
        DisjointAtop: 0x19;
        DisjointAtopReverse: 0x1a;
        DisjointXor: 0x1b;
        DisjointMaximum: 0x1b;
        ConjointMinimum: 0x20;
        ConjointClear: 0x20;
        ConjointSrc: 0x21;
        ConjointDst: 0x22;
        ConjointOver: 0x23;
        ConjointOverReverse: 0x24;
        ConjointIn: 0x25;
        ConjointInReverse: 0x26;
        ConjointOut: 0x27;
        ConjointOutReverse: 0x28;
        ConjointAtop: 0x29;
        ConjointAtopReverse: 0x2a;
        ConjointXor: 0x2b;
        ConjointMaximum: 0x2b;
        BlendMinimum: 0x30;
        Multiply: 0x30;
        Screen: 0x31;
        Overlay: 0x32;
        Darken: 0x33;
        Lighten: 0x34;
        ColorDodge: 0x35;
        ColorBurn: 0x36;
        HardLight: 0x37;
        SoftLight: 0x38;
        Difference: 0x39;
        Exclusion: 0x3a;
        HSLHue: 0x3b;
        HSLSaturation: 0x3c;
        HSLColor: 0x3d;
        HSLLuminosity: 0x3e;
        BlendMaximum: 0x3e;
    };
    PolyEdge: {
        Sharp: 0;
        Smooth: 1;
    };
    PolyMode: {
        Precise: 0;
        Imprecise: 1;
    };
    Repeat: {
        None: 0;
        Normal: 1;
        Pad: 2;
        Reflect: 3;
    };
    Subpixel: {
        Unknown: 0;
        HorizontalRGB: 1;
        HorizontalBGR: 2;
        VerticalRGB: 3;
        VerticalBGR: 4;
        None: 5;
    };
    Filters: {
        Nearest: 'nearest';
        Bilinear: 'bilinear';
        Convolution: 'convolution';
        Fast: 'fast';
        Good: 'good';
        Best: 'best';
    };
}
export declare const requireExt: XExtensionInit<Render>;
